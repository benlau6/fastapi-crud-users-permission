{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fastapi-fullstack Introduction A FastAPI project template with frontend, authentication, authorization, CRUD, documentation, testing. Documentation Features User system Authorization per user, per row, per route JWT authentication Automatic OpenAPI documentation Test automation Type checking Vue frontend Thanks to fastapi ( doc ) for one of the best api framework in python. Don't skip the doc if you just knew it. It is perfectly written. fastapi-permission ( doc ) for row-based security control. vue-element-admin ( doc ) ( demo ) traefik ( doc ) for reverse proxy and payload size limiting. sqlmodel ( doc ) for sql models and orm. pymongo ( doc ) for connecting MongoDB pytest ( doc ) for testing pydantic ( doc ) for data validation pycodestyle for python style checking black for automatic PEP8 formatting mypy ( doc ) for type checking You may also wanna check fastapi-pynamodb-lambda-simple or fastapi-pynamodb-lambda-versioning for using FastAPI on AWS Installation git clone https://github.com/benlau6/fastapi-fullstack.git cd fastapi-fullstack docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build Play it Backend: Browse http://127.0.0.1/api/docs Frontend: Browse http://127.0.0.1 Reference Authentication jwt auth Nginx Is Nginx used and working? \u6784\u5efa\u53d1\u5e03docker \u5982\u4f55\u4f7f\u7528 docker \u90e8\u7f72\u524d\u7aef\u9879\u76ee Cookie What is cookie? Tutorial hands on experience in vue-admin conclusion in vue-element-admin Project structure full-stack-fastapi-postgresql dispatch Docker-compose overriding License This project is licensed under the terms of the MIT license.","title":"Overview"},{"location":"#fastapi-fullstack","text":"","title":"fastapi-fullstack"},{"location":"#introduction","text":"A FastAPI project template with frontend, authentication, authorization, CRUD, documentation, testing. Documentation","title":"Introduction"},{"location":"#features","text":"User system Authorization per user, per row, per route JWT authentication Automatic OpenAPI documentation Test automation Type checking Vue frontend","title":"Features"},{"location":"#thanks-to","text":"fastapi ( doc ) for one of the best api framework in python. Don't skip the doc if you just knew it. It is perfectly written. fastapi-permission ( doc ) for row-based security control. vue-element-admin ( doc ) ( demo ) traefik ( doc ) for reverse proxy and payload size limiting. sqlmodel ( doc ) for sql models and orm. pymongo ( doc ) for connecting MongoDB pytest ( doc ) for testing pydantic ( doc ) for data validation pycodestyle for python style checking black for automatic PEP8 formatting mypy ( doc ) for type checking You may also wanna check fastapi-pynamodb-lambda-simple or fastapi-pynamodb-lambda-versioning for using FastAPI on AWS","title":"Thanks to"},{"location":"#installation","text":"git clone https://github.com/benlau6/fastapi-fullstack.git cd fastapi-fullstack docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build","title":"Installation"},{"location":"#play-it","text":"Backend: Browse http://127.0.0.1/api/docs Frontend: Browse http://127.0.0.1","title":"Play it"},{"location":"#reference","text":"Authentication jwt auth Nginx Is Nginx used and working? \u6784\u5efa\u53d1\u5e03docker \u5982\u4f55\u4f7f\u7528 docker \u90e8\u7f72\u524d\u7aef\u9879\u76ee Cookie What is cookie? Tutorial hands on experience in vue-admin conclusion in vue-element-admin Project structure full-stack-fastapi-postgresql dispatch Docker-compose overriding","title":"Reference"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"backend/api-docs/","text":"API Docs Note You should keep the container running Runnable doc Browse http://127.0.0.1/api/docs Printable doc Browse http://127.0.0.1/api/redoc","title":"API Docs"},{"location":"backend/api-docs/#api-docs","text":"Note You should keep the container running","title":"API Docs"},{"location":"backend/api-docs/#runnable-doc","text":"Browse http://127.0.0.1/api/docs","title":"Runnable doc"},{"location":"backend/api-docs/#printable-doc","text":"Browse http://127.0.0.1/api/redoc","title":"Printable doc"},{"location":"backend/coding-style-checking/","text":"Coding Style Checking It ensures PEP8 coding style. Get into the api container docker exec -it fastapi-fullstack_api_1 /bin/bash Check everything pycodestyle . Automatic correction black .","title":"Code Style Checking"},{"location":"backend/coding-style-checking/#coding-style-checking","text":"It ensures PEP8 coding style. Get into the api container docker exec -it fastapi-fullstack_api_1 /bin/bash Check everything pycodestyle . Automatic correction black .","title":"Coding Style Checking"},{"location":"backend/qna/","text":"Q&A app/prestart.sh not found? Solution set git config core.autocrlf false before using 'git add .' if you are using windows Value of type \"Optional[UserInDB]\" is not indexable / Incompatible return value type (got \"Optional[UserInDB]\", expected \"UserInDB\")? Solution assert Object before take attribute!","title":"Q&A"},{"location":"backend/qna/#qa","text":"app/prestart.sh not found? Solution set git config core.autocrlf false before using 'git add .' if you are using windows Value of type \"Optional[UserInDB]\" is not indexable / Incompatible return value type (got \"Optional[UserInDB]\", expected \"UserInDB\")? Solution assert Object before take attribute!","title":"Q&amp;A"},{"location":"backend/testing/","text":"Testing Get into the api container docker exec -it fastapi-fullstack_api_1 /bin/bash Test everything pytest","title":"Testing"},{"location":"backend/testing/#testing","text":"Get into the api container docker exec -it fastapi-fullstack_api_1 /bin/bash Test everything pytest","title":"Testing"},{"location":"backend/type-checking/","text":"Type Checking Get into the api container docker exec -it fastapi-fullstack_api_1 /bin/bash Check everything mypy .","title":"Type Checking"},{"location":"backend/type-checking/#type-checking","text":"Get into the api container docker exec -it fastapi-fullstack_api_1 /bin/bash Check everything mypy .","title":"Type Checking"},{"location":"choices/","text":"Intro This project is built on top of many other tools. Lots of research and experiments had been done for comparison to select the best suited tools. These experiences may be good for me or others to build the next projects. So here is the chapter to explain why the tools are chosen. Feel free to skip it if you are not interested.","title":"Intro"},{"location":"choices/#intro","text":"This project is built on top of many other tools. Lots of research and experiments had been done for comparison to select the best suited tools. These experiences may be good for me or others to build the next projects. So here is the chapter to explain why the tools are chosen. Feel free to skip it if you are not interested.","title":"Intro"},{"location":"choices/docs-site-generator/","text":"Documentation Site Generator MkDocs \u2714\ufe0f Beauty \u2714\ufe0f Simple \u2714\ufe0f One-line github page deployment \u2714\ufe0f Separate table of contents \u2714\ufe0f Single yml configuration file Docsify \u2714\ufe0f Beauty \u2714\ufe0f Simple \u274c Bad for SEO \u274c Lengthy table of contents mdBook \u2714\ufe0f Beauty \u2714\ufe0f Simple GitBook \u274c Stopped open source maintenance Jekyll \u274c No good documentation theme Docusaurus React based \u2714\ufe0f Good for SPA, which designed for not only documentation \u274c Complicated setup VuePress Vue based \u2714\ufe0f Good for SPA, which designed for not only documentation \u274c Complicated setup Further readings Docusaurus' comparison with other tools","title":"Documentation Site Generator"},{"location":"choices/docs-site-generator/#documentation-site-generator","text":"","title":"Documentation Site Generator"},{"location":"choices/docs-site-generator/#mkdocs","text":"\u2714\ufe0f Beauty \u2714\ufe0f Simple \u2714\ufe0f One-line github page deployment \u2714\ufe0f Separate table of contents \u2714\ufe0f Single yml configuration file","title":"MkDocs"},{"location":"choices/docs-site-generator/#docsify","text":"\u2714\ufe0f Beauty \u2714\ufe0f Simple \u274c Bad for SEO \u274c Lengthy table of contents","title":"Docsify"},{"location":"choices/docs-site-generator/#mdbook","text":"\u2714\ufe0f Beauty \u2714\ufe0f Simple","title":"mdBook"},{"location":"choices/docs-site-generator/#gitbook","text":"\u274c Stopped open source maintenance","title":"GitBook"},{"location":"choices/docs-site-generator/#jekyll","text":"\u274c No good documentation theme","title":"Jekyll"},{"location":"choices/docs-site-generator/#docusaurus","text":"React based \u2714\ufe0f Good for SPA, which designed for not only documentation \u274c Complicated setup","title":"Docusaurus"},{"location":"choices/docs-site-generator/#vuepress","text":"Vue based \u2714\ufe0f Good for SPA, which designed for not only documentation \u274c Complicated setup","title":"VuePress"},{"location":"choices/docs-site-generator/#further-readings","text":"Docusaurus' comparison with other tools","title":"Further readings"},{"location":"choices/frontend-template/","text":"Frontend Template Vue Element Admin Written by Vue, one-man managed \u2714\ufe0f Clean template \u2714\ufe0f Axios request library with full control in request and response requirements \u2714\ufe0f Huge community \u2714\ufe0f Comprehensive documentation \u274c Stopped maintenance Ant Design Pro Written by React, managed by Ant Group \u2714\ufe0f Many features \u2714\ufe0f Comprehensive documentation \u274c Self-made request library with fixed schema in request and response requirements Ant Design Pro Vue Written by Vue, community managed \u2714\ufe0f Axios request library with full control in request and response requirements \u274c Too many preset pages","title":"Frontend Template"},{"location":"choices/frontend-template/#frontend-template","text":"","title":"Frontend Template"},{"location":"choices/frontend-template/#vue-element-admin","text":"Written by Vue, one-man managed \u2714\ufe0f Clean template \u2714\ufe0f Axios request library with full control in request and response requirements \u2714\ufe0f Huge community \u2714\ufe0f Comprehensive documentation \u274c Stopped maintenance","title":"Vue Element Admin"},{"location":"choices/frontend-template/#ant-design-pro","text":"Written by React, managed by Ant Group \u2714\ufe0f Many features \u2714\ufe0f Comprehensive documentation \u274c Self-made request library with fixed schema in request and response requirements","title":"Ant Design Pro"},{"location":"choices/frontend-template/#ant-design-pro-vue","text":"Written by Vue, community managed \u2714\ufe0f Axios request library with full control in request and response requirements \u274c Too many preset pages","title":"Ant Design Pro Vue"},{"location":"frontend/qna/","text":"Q&A JWT auth not working? Solution (frontend) app/src/utils/requests.js -> request interceptor set config.headers['Authorization'] = 'Bearer ' + getToken() service . interceptors . request . use ( ... if ( store . getters . token ) { // let each request carry token // [ 'X-Token' ] is a custom headers key // please modify it according to the actual situation config . headers [ 'Authorization' ] = 'Bearer ' + getToken () } return config }, ... Backend response format not matching? Solution Solution 1 (backend) Change your response_model schemas in app/app/api/schemas Solution 2 (frontend) app/src/utils/requests.js -> response interceptor set const res = {...} service . interceptors . response . use ( ... response => { const hasData = response . data != null const hasDetail = hasData ? response . data . detail != null : false const res = { 'code' : response . status , 'data' : hasData ? response . data : null , 'message' : hasDetail ? response . data . detail : null } ... Solution 3 (backend) app/app/main.py -> add middleware to handle response # it formatted response, but openapi crashed import json class async_iterator_wrapper : def __init__ ( self , obj ): self . _it = iter ( obj ) def __aiter__ ( self ): return self async def __anext__ ( self ): try : value = next ( self . _it ) except StopIteration : raise StopAsyncIteration return value @app . middleware ( \"http\" ) async def format_output_for_frontend ( request : Request , call_next ): response = await call_next ( request ) res_body = [ x async for x in response . __dict__ [ 'body_iterator' ]] try : if 200 <= response . status_code < 300 : status = True else : status = False res_body_json = res_body [ 0 ] res_body_data = json . loads ( res_body_json ) if res_body_data is not None : msg = res_body_data . pop ( 'detail' , None ) data = dict ( res_body_data ) else : msg = None data = None res_body_data = { 'status' : status , 'msg' : msg , 'data' : data , } res_body_json = json . dumps ( res_body_data ) res_body = [ res_body_json . encode ()] response . headers [ 'content-length' ] = str ( len ( res_body_json )) except : pass response . __setattr__ ( 'body_iterator' , async_iterator_wrapper ( res_body )) return response Cookie is not stored? Solution Solution 1 - cookie size (backend) Ensure cookie body is not larger than 4kb, otherwise use sessionStorage instead at app/src/utils/auth.js export function getToken () { return sessionStorage . getItem ( TokenKey ) } export function setToken ( token ) { return sessionStorage . setItem ( TokenKey , token ) } export function removeToken () { return sessionStorage . removeItem ( TokenKey ) } Solution 2 - with reverse proxy Check your host, port configs in traefik, frontend, backend Solution 3 - without reverse proxy (backend) Enable CORSMiddleware at app/app/main.py # to enable Access-Control-Allow-Credentials # to enable Access-Control-Allow-Origin for frontend origin # P.S. Origin is only considered to be the same if the protocol, host and port is the same # Ref. https://www.w3.org/Security/wiki/Same_Origin_Policy app . add_middleware ( CORSMiddleware , allow_origins = [ 'http://localhost:9528' , 'http://127.0.0.1:9528' ], allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) (frontend) Enable axios withCredentials at app/src/utils/request.js const service = axios . create ({ baseURL : process . env . VUE_APP_BASE_API , // url = base url + request url withCredentials : true , // send cookies when cross-domain requests timeout : 5000 // request timeout }) Solution 4 - using fastapi-users (frontend) app/src/utils/auth.js -> set const TokenKey = 'fastapiusersauth' (fastapi-users) set CookieAuthentication(..., cookie_samesite='None')","title":"Q&A"},{"location":"frontend/qna/#qa","text":"JWT auth not working? Solution (frontend) app/src/utils/requests.js -> request interceptor set config.headers['Authorization'] = 'Bearer ' + getToken() service . interceptors . request . use ( ... if ( store . getters . token ) { // let each request carry token // [ 'X-Token' ] is a custom headers key // please modify it according to the actual situation config . headers [ 'Authorization' ] = 'Bearer ' + getToken () } return config }, ... Backend response format not matching? Solution Solution 1 (backend) Change your response_model schemas in app/app/api/schemas Solution 2 (frontend) app/src/utils/requests.js -> response interceptor set const res = {...} service . interceptors . response . use ( ... response => { const hasData = response . data != null const hasDetail = hasData ? response . data . detail != null : false const res = { 'code' : response . status , 'data' : hasData ? response . data : null , 'message' : hasDetail ? response . data . detail : null } ... Solution 3 (backend) app/app/main.py -> add middleware to handle response # it formatted response, but openapi crashed import json class async_iterator_wrapper : def __init__ ( self , obj ): self . _it = iter ( obj ) def __aiter__ ( self ): return self async def __anext__ ( self ): try : value = next ( self . _it ) except StopIteration : raise StopAsyncIteration return value @app . middleware ( \"http\" ) async def format_output_for_frontend ( request : Request , call_next ): response = await call_next ( request ) res_body = [ x async for x in response . __dict__ [ 'body_iterator' ]] try : if 200 <= response . status_code < 300 : status = True else : status = False res_body_json = res_body [ 0 ] res_body_data = json . loads ( res_body_json ) if res_body_data is not None : msg = res_body_data . pop ( 'detail' , None ) data = dict ( res_body_data ) else : msg = None data = None res_body_data = { 'status' : status , 'msg' : msg , 'data' : data , } res_body_json = json . dumps ( res_body_data ) res_body = [ res_body_json . encode ()] response . headers [ 'content-length' ] = str ( len ( res_body_json )) except : pass response . __setattr__ ( 'body_iterator' , async_iterator_wrapper ( res_body )) return response Cookie is not stored? Solution Solution 1 - cookie size (backend) Ensure cookie body is not larger than 4kb, otherwise use sessionStorage instead at app/src/utils/auth.js export function getToken () { return sessionStorage . getItem ( TokenKey ) } export function setToken ( token ) { return sessionStorage . setItem ( TokenKey , token ) } export function removeToken () { return sessionStorage . removeItem ( TokenKey ) } Solution 2 - with reverse proxy Check your host, port configs in traefik, frontend, backend Solution 3 - without reverse proxy (backend) Enable CORSMiddleware at app/app/main.py # to enable Access-Control-Allow-Credentials # to enable Access-Control-Allow-Origin for frontend origin # P.S. Origin is only considered to be the same if the protocol, host and port is the same # Ref. https://www.w3.org/Security/wiki/Same_Origin_Policy app . add_middleware ( CORSMiddleware , allow_origins = [ 'http://localhost:9528' , 'http://127.0.0.1:9528' ], allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) (frontend) Enable axios withCredentials at app/src/utils/request.js const service = axios . create ({ baseURL : process . env . VUE_APP_BASE_API , // url = base url + request url withCredentials : true , // send cookies when cross-domain requests timeout : 5000 // request timeout }) Solution 4 - using fastapi-users (frontend) app/src/utils/auth.js -> set const TokenKey = 'fastapiusersauth' (fastapi-users) set CookieAuthentication(..., cookie_samesite='None')","title":"Q&amp;A"},{"location":"getting-started/","text":"Deployment Note All project development, testing, and deployment are done in windows10/11. docker-compose*.yml may need to be changed for linux/mac environment Note Docker should be installed Pull the repository git clone https://github.com/benlau6/fastapi-fullstack.git cd fastapi-fullstack Dev/test stage Note Strongly recommended for development / testing Note Build command must be rerun if dockerfile / docker-compose.yml is changed. e.g. dev -> prod or code changes Single server Apply code changes automatically docker-compose build docker-compose up Prod stage Multiple servers docker-compose -f docker-compose.yml -f docker-compose.prod.yml build docker-compose -f docker-compose.yml -f docker-compose.prod.yml up Check api status Browse http://127.0.0.1/api/status The following response should be shown: { \"status\" : \"OK\" } Optional commands Offline deployment Save the built images to .tar docker save -o fastapi-fullstack.tar fastapi-fullstack_api fastapi-fullstack_frontendtraefik Send the .tar to the offline server docker load -i fastapi-fullstack.tar Run servers in backend docker-compose up -d Shortcut for develpment docker-compose down ; docker-compose up --build","title":"Deployment"},{"location":"getting-started/#deployment","text":"Note All project development, testing, and deployment are done in windows10/11. docker-compose*.yml may need to be changed for linux/mac environment Note Docker should be installed","title":"Deployment"},{"location":"getting-started/#pull-the-repository","text":"git clone https://github.com/benlau6/fastapi-fullstack.git cd fastapi-fullstack","title":"Pull the repository"},{"location":"getting-started/#devtest-stage","text":"Note Strongly recommended for development / testing Note Build command must be rerun if dockerfile / docker-compose.yml is changed. e.g. dev -> prod or code changes Single server Apply code changes automatically docker-compose build docker-compose up","title":"Dev/test stage"},{"location":"getting-started/#prod-stage","text":"Multiple servers docker-compose -f docker-compose.yml -f docker-compose.prod.yml build docker-compose -f docker-compose.yml -f docker-compose.prod.yml up","title":"Prod stage"},{"location":"getting-started/#check-api-status","text":"Browse http://127.0.0.1/api/status The following response should be shown: { \"status\" : \"OK\" }","title":"Check api status"},{"location":"getting-started/#optional-commands","text":"Offline deployment Save the built images to .tar docker save -o fastapi-fullstack.tar fastapi-fullstack_api fastapi-fullstack_frontendtraefik Send the .tar to the offline server docker load -i fastapi-fullstack.tar Run servers in backend docker-compose up -d Shortcut for develpment docker-compose down ; docker-compose up --build","title":"Optional commands"},{"location":"getting-started/cleanup/","text":"Cleanup Stop the instance Ctrl + C or docker-compose down Remove unused services docker-compose down --remove-orphans Remove all <none> images docker rmi $( docker images -f \u201cdangling = true\u201d -q )","title":"Clean Up"},{"location":"getting-started/cleanup/#cleanup","text":"","title":"Cleanup"},{"location":"getting-started/cleanup/#stop-the-instance","text":"Ctrl + C or docker-compose down","title":"Stop the instance"},{"location":"getting-started/cleanup/#remove-unused-services","text":"docker-compose down --remove-orphans","title":"Remove unused services"},{"location":"getting-started/cleanup/#remove-all-none-images","text":"docker rmi $( docker images -f \u201cdangling = true\u201d -q )","title":"Remove all &lt;none> images"},{"location":"getting-started/playground/","text":"Playground Browse http://127.0.0.1 for frontend Browse http://127.0.0.1/api/docs for backend API docs","title":"Playground"},{"location":"getting-started/playground/#playground","text":"Browse http://127.0.0.1 for frontend Browse http://127.0.0.1/api/docs for backend API docs","title":"Playground"}]}