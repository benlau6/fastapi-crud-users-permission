version: '3.8'
services:
  reverse-proxy:
    image: traefik
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
      - 8080:8080
    networks:
      - backend
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      #- --api
      - --api.insecure=true
  api:
    build: ./backend
    # for direct entry: 127.0.0.1:3000
    ports:
      - 3000
    volumes:
      - ./data/files:/data/files
      - ./data/db:/data/db 
    depends_on:
      - db
    env_file:
      - .env
    environment: 
      # check for env: https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker
      - PORT=3000
      - LOG_LEVEL=debug
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use (shd be same as env:PORT)
      - traefik.http.services.api.loadbalancer.server.port=3000
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.api.entrypoints=http
      - traefik.http.routers.api.rule=Host(`127.0.0.1`) && PathPrefix(`/api`)
      - traefik.http.middlewares.stripprefix.stripprefix.prefixes=/api
      # Sets the maximum request body to 200MB
      - traefik.http.middlewares.sizelimit.buffering.maxRequestBodyBytes=200000000
      # Apply middlewares
      - traefik.http.routers.api.middlewares=stripprefix@docker,sizelimit@docker
    networks:
      - backend
  db:
    image: postgres:12
    ports: 
      - 5432
    networks:
      - backend
    # check PGDATA section https://hub.docker.com/_/postgres for this weird sub-directory config
    volumes:
      - ./data/db:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 5050
    networks:
      - backend
    depends_on:
      - db
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=5050
      - traefik.http.routers.pgadmin.entrypoints=http
      - traefik.http.routers.pgadmin.rule=Host(`127.0.0.1`)
networks:
  backend: